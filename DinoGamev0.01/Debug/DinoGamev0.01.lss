
DinoGamev0.01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000007ec  00000880  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000038  00000000  00000000  000008af  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000008e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ac2  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ba  00000000  00000000  000024f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c49  00000000  00000000  00002dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  000039f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f6  00000000  00000000  00003be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bed  00000000  00000000  00003dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000049c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000007d0  000007d0  00000864  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.toggle_e 00000010  00000794  00000794  00000828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write 000000d8  000003d8  000003d8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_read 00000076  0000054c  0000054c  000005e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_waitbusy 0000001a  00000724  00000724  000007b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_command 00000014  00000758  00000758  000007ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_data 00000014  0000076c  0000076c  00000800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_gotoxy 00000014  00000780  00000780  00000814  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_clrscr 00000008  000007c8  000007c8  0000085c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.lcd_putc 0000002a  00000686  00000686  0000071a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.lcd_init 0000009c  000004b0  000004b0  00000544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.CreateCustomCharacter 0000003e  00000614  00000614  000006a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.lcd_print 00000034  00000652  00000652  000006e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.lcd_print2 00000052  000005c2  000005c2  00000656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.max     0000000c  000007b2  000007b2  00000846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .progmemx.data 00000023  000000b0  000000b0  00000144  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .rodata       00000018  00800060  000007d4  00000868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 30 .text.main    00000304  000000d4  000000d4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.libgcc.div 00000028  000006b0  000006b0  00000744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.libgcc.div 00000028  000006d8  000006d8  0000076c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.avrlibc 0000000e  000007a4  000007a4  00000838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.avrlibc 0000000a  000007be  000007be  00000852  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc 00000024  00000700  00000700  00000794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc 0000001a  0000073e  0000073e  000007d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
   8:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
   c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  10:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  14:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  18:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  1c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  20:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  24:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  28:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  2c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  30:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  34:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  38:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  3c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  40:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  44:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  48:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  4c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  50:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 78       	andi	r16, 0x80	; 128
  58:	00 07       	cpc	r16, r16
  5a:	d4 00       	.word	0x00d4	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  a8:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

000007d0 <__bad_interrupt>:
 7d0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.toggle_e:

00000794 <toggle_e>:
/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
}
 794:	8b b3       	in	r24, 0x1b	; 27
 796:	84 60       	ori	r24, 0x04	; 4
 798:	8b bb       	out	0x1b, r24	; 27
 79a:	00 c0       	rjmp	.+0      	; 0x79c <toggle_e+0x8>
 79c:	8b b3       	in	r24, 0x1b	; 27
 79e:	8b 7f       	andi	r24, 0xFB	; 251
 7a0:	8b bb       	out	0x1b, r24	; 27
 7a2:	08 95       	ret

Disassembly of section .text.lcd_write:

000003d8 <lcd_write>:
 3d8:	cf 93       	push	r28
 3da:	c8 2f       	mov	r28, r24
 3dc:	66 23       	and	r22, r22
 3de:	21 f0       	breq	.+8      	; 0x3e8 <lcd_write+0x10>
 3e0:	8b b3       	in	r24, 0x1b	; 27
 3e2:	81 60       	ori	r24, 0x01	; 1
 3e4:	8b bb       	out	0x1b, r24	; 27
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <lcd_write+0x16>
 3e8:	8b b3       	in	r24, 0x1b	; 27
 3ea:	8e 7f       	andi	r24, 0xFE	; 254
 3ec:	8b bb       	out	0x1b, r24	; 27
 3ee:	8b b3       	in	r24, 0x1b	; 27
 3f0:	8d 7f       	andi	r24, 0xFD	; 253
 3f2:	8b bb       	out	0x1b, r24	; 27
 3f4:	8a b3       	in	r24, 0x1a	; 26
 3f6:	80 61       	ori	r24, 0x10	; 16
 3f8:	8a bb       	out	0x1a, r24	; 26
 3fa:	8a b3       	in	r24, 0x1a	; 26
 3fc:	80 62       	ori	r24, 0x20	; 32
 3fe:	8a bb       	out	0x1a, r24	; 26
 400:	8a b3       	in	r24, 0x1a	; 26
 402:	80 64       	ori	r24, 0x40	; 64
 404:	8a bb       	out	0x1a, r24	; 26
 406:	8a b3       	in	r24, 0x1a	; 26
 408:	80 68       	ori	r24, 0x80	; 128
 40a:	8a bb       	out	0x1a, r24	; 26
 40c:	8b b3       	in	r24, 0x1b	; 27
 40e:	8f 77       	andi	r24, 0x7F	; 127
 410:	8b bb       	out	0x1b, r24	; 27
 412:	8b b3       	in	r24, 0x1b	; 27
 414:	8f 7b       	andi	r24, 0xBF	; 191
 416:	8b bb       	out	0x1b, r24	; 27
 418:	8b b3       	in	r24, 0x1b	; 27
 41a:	8f 7d       	andi	r24, 0xDF	; 223
 41c:	8b bb       	out	0x1b, r24	; 27
 41e:	8b b3       	in	r24, 0x1b	; 27
 420:	8f 7e       	andi	r24, 0xEF	; 239
 422:	8b bb       	out	0x1b, r24	; 27
 424:	cc 23       	and	r28, r28
 426:	1c f4       	brge	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 428:	8b b3       	in	r24, 0x1b	; 27
 42a:	80 68       	ori	r24, 0x80	; 128
 42c:	8b bb       	out	0x1b, r24	; 27
 42e:	c6 ff       	sbrs	r28, 6
 430:	03 c0       	rjmp	.+6      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 432:	8b b3       	in	r24, 0x1b	; 27
 434:	80 64       	ori	r24, 0x40	; 64
 436:	8b bb       	out	0x1b, r24	; 27
 438:	c5 ff       	sbrs	r28, 5
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43c:	8b b3       	in	r24, 0x1b	; 27
 43e:	80 62       	ori	r24, 0x20	; 32
 440:	8b bb       	out	0x1b, r24	; 27
 442:	c4 ff       	sbrs	r28, 4
 444:	03 c0       	rjmp	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 446:	8b b3       	in	r24, 0x1b	; 27
 448:	80 61       	ori	r24, 0x10	; 16
 44a:	8b bb       	out	0x1b, r24	; 27
 44c:	0e 94 ca 03 	call	0x794	; 0x794 <toggle_e>
 450:	8b b3       	in	r24, 0x1b	; 27
 452:	8f 77       	andi	r24, 0x7F	; 127
 454:	8b bb       	out	0x1b, r24	; 27
 456:	8b b3       	in	r24, 0x1b	; 27
 458:	8f 7b       	andi	r24, 0xBF	; 191
 45a:	8b bb       	out	0x1b, r24	; 27
 45c:	8b b3       	in	r24, 0x1b	; 27
 45e:	8f 7d       	andi	r24, 0xDF	; 223
 460:	8b bb       	out	0x1b, r24	; 27
 462:	8b b3       	in	r24, 0x1b	; 27
 464:	8f 7e       	andi	r24, 0xEF	; 239
 466:	8b bb       	out	0x1b, r24	; 27
 468:	c3 ff       	sbrs	r28, 3
 46a:	03 c0       	rjmp	.+6      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 46c:	8b b3       	in	r24, 0x1b	; 27
 46e:	80 68       	ori	r24, 0x80	; 128
 470:	8b bb       	out	0x1b, r24	; 27
 472:	c2 ff       	sbrs	r28, 2
 474:	03 c0       	rjmp	.+6      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 476:	8b b3       	in	r24, 0x1b	; 27
 478:	80 64       	ori	r24, 0x40	; 64
 47a:	8b bb       	out	0x1b, r24	; 27
 47c:	c1 ff       	sbrs	r28, 1
 47e:	03 c0       	rjmp	.+6      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 480:	8b b3       	in	r24, 0x1b	; 27
 482:	80 62       	ori	r24, 0x20	; 32
 484:	8b bb       	out	0x1b, r24	; 27
 486:	c0 ff       	sbrs	r28, 0
 488:	03 c0       	rjmp	.+6      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48a:	8b b3       	in	r24, 0x1b	; 27
 48c:	80 61       	ori	r24, 0x10	; 16
 48e:	8b bb       	out	0x1b, r24	; 27
 490:	0e 94 ca 03 	call	0x794	; 0x794 <toggle_e>
 494:	8b b3       	in	r24, 0x1b	; 27
 496:	80 61       	ori	r24, 0x10	; 16
 498:	8b bb       	out	0x1b, r24	; 27
 49a:	8b b3       	in	r24, 0x1b	; 27
 49c:	80 62       	ori	r24, 0x20	; 32
 49e:	8b bb       	out	0x1b, r24	; 27
 4a0:	8b b3       	in	r24, 0x1b	; 27
 4a2:	80 64       	ori	r24, 0x40	; 64
 4a4:	8b bb       	out	0x1b, r24	; 27
 4a6:	8b b3       	in	r24, 0x1b	; 27
 4a8:	80 68       	ori	r24, 0x80	; 128
 4aa:	8b bb       	out	0x1b, r24	; 27
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

Disassembly of section .text.lcd_read:

0000054c <lcd_read>:
 54c:	88 23       	and	r24, r24
 54e:	21 f0       	breq	.+8      	; 0x558 <lcd_read+0xc>
 550:	8b b3       	in	r24, 0x1b	; 27
 552:	81 60       	ori	r24, 0x01	; 1
 554:	8b bb       	out	0x1b, r24	; 27
 556:	03 c0       	rjmp	.+6      	; 0x55e <lcd_read+0x12>
 558:	8b b3       	in	r24, 0x1b	; 27
 55a:	8e 7f       	andi	r24, 0xFE	; 254
 55c:	8b bb       	out	0x1b, r24	; 27
 55e:	8b b3       	in	r24, 0x1b	; 27
 560:	82 60       	ori	r24, 0x02	; 2
 562:	8b bb       	out	0x1b, r24	; 27
 564:	8a b3       	in	r24, 0x1a	; 26
 566:	8f 7e       	andi	r24, 0xEF	; 239
 568:	8a bb       	out	0x1a, r24	; 26
 56a:	8a b3       	in	r24, 0x1a	; 26
 56c:	8f 7d       	andi	r24, 0xDF	; 223
 56e:	8a bb       	out	0x1a, r24	; 26
 570:	8a b3       	in	r24, 0x1a	; 26
 572:	8f 7b       	andi	r24, 0xBF	; 191
 574:	8a bb       	out	0x1a, r24	; 26
 576:	8a b3       	in	r24, 0x1a	; 26
 578:	8f 77       	andi	r24, 0x7F	; 127
 57a:	8a bb       	out	0x1a, r24	; 26
 57c:	8b b3       	in	r24, 0x1b	; 27
 57e:	84 60       	ori	r24, 0x04	; 4
 580:	8b bb       	out	0x1b, r24	; 27
 582:	00 c0       	rjmp	.+0      	; 0x584 <lcd_read+0x38>
 584:	cc 99       	sbic	0x19, 4	; 25
 586:	02 c0       	rjmp	.+4      	; 0x58c <lcd_read+0x40>
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	01 c0       	rjmp	.+2      	; 0x58e <lcd_read+0x42>
 58c:	80 e1       	ldi	r24, 0x10	; 16
 58e:	cd 99       	sbic	0x19, 5	; 25
 590:	80 62       	ori	r24, 0x20	; 32
 592:	ce 99       	sbic	0x19, 6	; 25
 594:	80 64       	ori	r24, 0x40	; 64
 596:	cf 99       	sbic	0x19, 7	; 25
 598:	80 68       	ori	r24, 0x80	; 128
 59a:	9b b3       	in	r25, 0x1b	; 27
 59c:	9b 7f       	andi	r25, 0xFB	; 251
 59e:	9b bb       	out	0x1b, r25	; 27
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <lcd_read+0x56>
 5a2:	9b b3       	in	r25, 0x1b	; 27
 5a4:	94 60       	ori	r25, 0x04	; 4
 5a6:	9b bb       	out	0x1b, r25	; 27
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <lcd_read+0x5e>
 5aa:	cc 99       	sbic	0x19, 4	; 25
 5ac:	81 60       	ori	r24, 0x01	; 1
 5ae:	cd 99       	sbic	0x19, 5	; 25
 5b0:	82 60       	ori	r24, 0x02	; 2
 5b2:	ce 99       	sbic	0x19, 6	; 25
 5b4:	84 60       	ori	r24, 0x04	; 4
 5b6:	cf 99       	sbic	0x19, 7	; 25
 5b8:	88 60       	ori	r24, 0x08	; 8
 5ba:	9b b3       	in	r25, 0x1b	; 27
 5bc:	9b 7f       	andi	r25, 0xFB	; 251
 5be:	9b bb       	out	0x1b, r25	; 27
 5c0:	08 95       	ret

Disassembly of section .text.lcd_waitbusy:

00000724 <lcd_waitbusy>:
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_read>
 72a:	88 23       	and	r24, r24
 72c:	dc f3       	brlt	.-10     	; 0x724 <lcd_waitbusy>
 72e:	88 e0       	ldi	r24, 0x08	; 8
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	01 97       	sbiw	r24, 0x01	; 1
 734:	f1 f7       	brne	.-4      	; 0x732 <lcd_waitbusy+0xe>
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_read>
 73c:	08 95       	ret

Disassembly of section .text.lcd_command:

00000758 <lcd_command>:
 758:	cf 93       	push	r28
 75a:	c8 2f       	mov	r28, r24
 75c:	0e 94 92 03 	call	0x724	; 0x724 <lcd_waitbusy>
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	8c 2f       	mov	r24, r28
 764:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_write>
 768:	cf 91       	pop	r28
 76a:	08 95       	ret

Disassembly of section .text.lcd_data:

0000076c <lcd_data>:
 76c:	cf 93       	push	r28
 76e:	c8 2f       	mov	r28, r24
 770:	0e 94 92 03 	call	0x724	; 0x724 <lcd_waitbusy>
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	8c 2f       	mov	r24, r28
 778:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_write>
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

Disassembly of section .text.lcd_gotoxy:

00000780 <lcd_gotoxy>:
 780:	61 11       	cpse	r22, r1
 782:	04 c0       	rjmp	.+8      	; 0x78c <lcd_gotoxy+0xc>
 784:	80 58       	subi	r24, 0x80	; 128
 786:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
 78a:	08 95       	ret
 78c:	80 54       	subi	r24, 0x40	; 64
 78e:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
 792:	08 95       	ret

Disassembly of section .text.lcd_clrscr:

000007c8 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
 7ce:	08 95       	ret

Disassembly of section .text.lcd_putc:

00000686 <lcd_putc>:
/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
}
 686:	cf 93       	push	r28
 688:	c8 2f       	mov	r28, r24
 68a:	0e 94 92 03 	call	0x724	; 0x724 <lcd_waitbusy>
 68e:	ca 30       	cpi	r28, 0x0A	; 10
 690:	49 f4       	brne	.+18     	; 0x6a4 <lcd_putc+0x1e>
 692:	80 34       	cpi	r24, 0x40	; 64
 694:	10 f4       	brcc	.+4      	; 0x69a <lcd_putc+0x14>
 696:	80 e4       	ldi	r24, 0x40	; 64
 698:	01 c0       	rjmp	.+2      	; 0x69c <lcd_putc+0x16>
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	80 58       	subi	r24, 0x80	; 128
 69e:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
 6a2:	04 c0       	rjmp	.+8      	; 0x6ac <lcd_putc+0x26>
 6a4:	61 e0       	ldi	r22, 0x01	; 1
 6a6:	8c 2f       	mov	r24, r28
 6a8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_write>
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

Disassembly of section .text.lcd_init:

000004b0 <lcd_init>:
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	18 2f       	mov	r17, r24
 4b8:	8a b3       	in	r24, 0x1a	; 26
 4ba:	81 60       	ori	r24, 0x01	; 1
 4bc:	8a bb       	out	0x1a, r24	; 26
 4be:	8a b3       	in	r24, 0x1a	; 26
 4c0:	82 60       	ori	r24, 0x02	; 2
 4c2:	8a bb       	out	0x1a, r24	; 26
 4c4:	8a b3       	in	r24, 0x1a	; 26
 4c6:	84 60       	ori	r24, 0x04	; 4
 4c8:	8a bb       	out	0x1a, r24	; 26
 4ca:	8a b3       	in	r24, 0x1a	; 26
 4cc:	80 61       	ori	r24, 0x10	; 16
 4ce:	8a bb       	out	0x1a, r24	; 26
 4d0:	8a b3       	in	r24, 0x1a	; 26
 4d2:	80 62       	ori	r24, 0x20	; 32
 4d4:	8a bb       	out	0x1a, r24	; 26
 4d6:	8a b3       	in	r24, 0x1a	; 26
 4d8:	80 64       	ori	r24, 0x40	; 64
 4da:	8a bb       	out	0x1a, r24	; 26
 4dc:	8a b3       	in	r24, 0x1a	; 26
 4de:	80 68       	ori	r24, 0x80	; 128
 4e0:	8a bb       	out	0x1a, r24	; 26
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	9a ef       	ldi	r25, 0xFA	; 250
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <lcd_init+0x36>
 4ea:	8b b3       	in	r24, 0x1b	; 27
 4ec:	80 62       	ori	r24, 0x20	; 32
 4ee:	8b bb       	out	0x1b, r24	; 27
 4f0:	8b b3       	in	r24, 0x1b	; 27
 4f2:	80 61       	ori	r24, 0x10	; 16
 4f4:	8b bb       	out	0x1b, r24	; 27
 4f6:	0e 94 ca 03 	call	0x794	; 0x794 <toggle_e>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	9e e4       	ldi	r25, 0x4E	; 78
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <lcd_init+0x4e>
 502:	0e 94 ca 03 	call	0x794	; 0x794 <toggle_e>
 506:	c0 e0       	ldi	r28, 0x00	; 0
 508:	d1 e0       	ldi	r29, 0x01	; 1
 50a:	ce 01       	movw	r24, r28
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <lcd_init+0x5c>
 510:	0e 94 ca 03 	call	0x794	; 0x794 <toggle_e>
 514:	ce 01       	movw	r24, r28
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <lcd_init+0x66>
 51a:	8b b3       	in	r24, 0x1b	; 27
 51c:	8f 7e       	andi	r24, 0xEF	; 239
 51e:	8b bb       	out	0x1b, r24	; 27
 520:	0e 94 ca 03 	call	0x794	; 0x794 <toggle_e>
 524:	21 97       	sbiw	r28, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <lcd_init+0x74>
 528:	88 e2       	ldi	r24, 0x28	; 40
 52a:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
 52e:	88 e0       	ldi	r24, 0x08	; 8
 530:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
 534:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd_clrscr>
 538:	86 e0       	ldi	r24, 0x06	; 6
 53a:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
 53e:	81 2f       	mov	r24, r17
 540:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	08 95       	ret

Disassembly of section .text.CreateCustomCharacter:

00000614 <CreateCustomCharacter>:
#include <util/delay.h>
#include "lcd.h"

// function for storing custom character in CGROM of LCD
void CreateCustomCharacter (unsigned char *Pattern, const char Location)
{
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	8c 01       	movw	r16, r24
  int i=0;
  lcd_command(0x40+(Location*8));     //Send the Address of CGRAM
 61e:	86 2f       	mov	r24, r22
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	08 96       	adiw	r24, 0x08	; 8
 624:	88 0f       	add	r24, r24
 626:	88 0f       	add	r24, r24
 628:	88 0f       	add	r24, r24
 62a:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
  for (i=0; i<8; i++)
 62e:	c0 e0       	ldi	r28, 0x00	; 0
 630:	d0 e0       	ldi	r29, 0x00	; 0
 632:	07 c0       	rjmp	.+14     	; 0x642 <CreateCustomCharacter+0x2e>
  {
    lcd_data (Pattern [ i ] );  //Pass the bytes of pattern on LCD
 634:	f8 01       	movw	r30, r16
 636:	ec 0f       	add	r30, r28
 638:	fd 1f       	adc	r31, r29
 63a:	80 81       	ld	r24, Z
 63c:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd_data>
// function for storing custom character in CGROM of LCD
void CreateCustomCharacter (unsigned char *Pattern, const char Location)
{
  int i=0;
  lcd_command(0x40+(Location*8));     //Send the Address of CGRAM
  for (i=0; i<8; i++)
 640:	21 96       	adiw	r28, 0x01	; 1
 642:	c8 30       	cpi	r28, 0x08	; 8
 644:	d1 05       	cpc	r29, r1
 646:	b4 f3       	brlt	.-20     	; 0x634 <CreateCustomCharacter+0x20>
  {
    lcd_data (Pattern [ i ] );  //Pass the bytes of pattern on LCD
  }
         
}
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	08 95       	ret

Disassembly of section .text.lcd_print:

00000652 <lcd_print>:

//To display a string on LCD
void lcd_print(const char *s)
{
 652:	cf 92       	push	r12
 654:	df 92       	push	r13
 656:	ef 92       	push	r14
 658:	a8 2f       	mov	r26, r24
 65a:	cb 01       	movw	r24, r22
  register char c;

  while ( (c = *s++) ) {
 65c:	04 c0       	rjmp	.+8      	; 0x666 <lcd_print+0x14>
    lcd_putc(c); //display character on LCD
 65e:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
//To display a string on LCD
void lcd_print(const char *s)
{
  register char c;

  while ( (c = *s++) ) {
 662:	ae 2d       	mov	r26, r14
 664:	c6 01       	movw	r24, r12
 666:	6c 01       	movw	r12, r24
 668:	ea 2e       	mov	r14, r26
 66a:	2f ef       	ldi	r18, 0xFF	; 255
 66c:	c2 1a       	sub	r12, r18
 66e:	d2 0a       	sbc	r13, r18
 670:	e2 0a       	sbc	r14, r18
 672:	fc 01       	movw	r30, r24
 674:	84 91       	lpm	r24, Z
 676:	a7 fd       	sbrc	r26, 7
 678:	80 81       	ld	r24, Z
 67a:	81 11       	cpse	r24, r1
 67c:	f0 cf       	rjmp	.-32     	; 0x65e <lcd_print+0xc>
    lcd_putc(c); //display character on LCD
  }
}
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	cf 90       	pop	r12
 684:	08 95       	ret

Disassembly of section .text.lcd_print2:

000005c2 <lcd_print2>:

//display string by some delay(Animation)
void lcd_print2(const char *s)
{
 5c2:	cf 92       	push	r12
 5c4:	df 92       	push	r13
 5c6:	ef 92       	push	r14
 5c8:	a8 2f       	mov	r26, r24
 5ca:	cb 01       	movw	r24, r22
  register char c;

  while ( (c = *s++) ) {
 5cc:	0a c0       	rjmp	.+20     	; 0x5e2 <lcd_print2+0x20>
    lcd_putc(c);
 5ce:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d2:	8f e3       	ldi	r24, 0x3F	; 63
 5d4:	9c e9       	ldi	r25, 0x9C	; 156
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <lcd_print2+0x14>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <lcd_print2+0x1a>
 5dc:	00 00       	nop
//display string by some delay(Animation)
void lcd_print2(const char *s)
{
  register char c;

  while ( (c = *s++) ) {
 5de:	ae 2d       	mov	r26, r14
 5e0:	c6 01       	movw	r24, r12
 5e2:	6c 01       	movw	r12, r24
 5e4:	ea 2e       	mov	r14, r26
 5e6:	2f ef       	ldi	r18, 0xFF	; 255
 5e8:	c2 1a       	sub	r12, r18
 5ea:	d2 0a       	sbc	r13, r18
 5ec:	e2 0a       	sbc	r14, r18
 5ee:	fc 01       	movw	r30, r24
 5f0:	84 91       	lpm	r24, Z
 5f2:	a7 fd       	sbrc	r26, 7
 5f4:	80 81       	ld	r24, Z
 5f6:	81 11       	cpse	r24, r1
 5f8:	ea cf       	rjmp	.-44     	; 0x5ce <lcd_print2+0xc>
 5fa:	8f e7       	ldi	r24, 0x7F	; 127
 5fc:	98 e3       	ldi	r25, 0x38	; 56
 5fe:	21 e0       	ldi	r18, 0x01	; 1
 600:	81 50       	subi	r24, 0x01	; 1
 602:	90 40       	sbci	r25, 0x00	; 0
 604:	20 40       	sbci	r18, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <lcd_print2+0x3e>
 608:	00 c0       	rjmp	.+0      	; 0x60a <lcd_print2+0x48>
 60a:	00 00       	nop
    lcd_putc(c);
    _delay_ms(10);
  }
  
  _delay_ms(25);
 }
 60c:	ef 90       	pop	r14
 60e:	df 90       	pop	r13
 610:	cf 90       	pop	r12
 612:	08 95       	ret

Disassembly of section .text.max:

000007b2 <max>:
 
 int max(int a, int b) //maximum of two value function
 {
	 if(a >= b)
 7b2:	86 17       	cp	r24, r22
 7b4:	97 07       	cpc	r25, r23
 7b6:	14 f4       	brge	.+4      	; 0x7bc <max+0xa>
	 {
		 return a;
	 }
	 
	 return b;
 7b8:	86 2f       	mov	r24, r22
 7ba:	97 2f       	mov	r25, r23
 }
 7bc:	08 95       	ret

Disassembly of section .text.main:

000000d4 <main>:
#define LINE1_2BOX 0x82 //Jump position of Dino
#define LINE2_2BOX 0xC2 //Rest position of Dino
#define LINE2_15BOX 0xCF //Spawning position of Tree

int main(void)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	68 97       	sbiw	r28, 0x18	; 24
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
  DDRA &= ~(1<<PA3); //set pin3 of PORTA as input
  e8:	8a b3       	in	r24, 0x1a	; 26
  ea:	87 7f       	andi	r24, 0xF7	; 247
  ec:	8a bb       	out	0x1a, r24	; 26
  lcd_init(LCD_DISP_ON); //Configuring LCD in 4-bit mode with Display ON cursor OFF
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_init>
  lcd_gotoxy(3,0); //Cursor to Row:1 Col:4
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 c0 03 	call	0x780	; 0x780 <lcd_gotoxy>
  lcd_print2("DinoGame!!");
  fc:	60 eb       	ldi	r22, 0xB0	; 176
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_print2>
  
  //Bitmap of Dino(Custom Character)
  unsigned char Dino[] = {
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	e0 e6       	ldi	r30, 0x60	; 96
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	de 01       	movw	r26, r28
 10e:	11 96       	adiw	r26, 0x01	; 1
 110:	01 90       	ld	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	8a 95       	dec	r24
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x3c>
    0b00100,
    0b00010
  };
  
  // Smashed Dino
  unsigned char sDino[] = {
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	e8 e6       	ldi	r30, 0x68	; 104
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	de 01       	movw	r26, r28
 120:	19 96       	adiw	r26, 0x09	; 9
 122:	01 90       	ld	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	8a 95       	dec	r24
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x4e>
    0b00100,
    0b00010
  };

  // Smashed Tree
  unsigned char sTree[] = {
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	e0 e7       	ldi	r30, 0x70	; 112
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	de 01       	movw	r26, r28
 132:	51 96       	adiw	r26, 0x11	; 17
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	8a 95       	dec	r24
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x60>
    0b10000,
    0b10000
  };  
  
  //Storing Custom Character in CGROM
  CreateCustomCharacter(Dino,3);
 13c:	63 e0       	ldi	r22, 0x03	; 3
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 0a 03 	call	0x614	; 0x614 <CreateCustomCharacter>
  CreateCustomCharacter(sDino,1);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	ce 01       	movw	r24, r28
 14a:	09 96       	adiw	r24, 0x09	; 9
 14c:	0e 94 0a 03 	call	0x614	; 0x614 <CreateCustomCharacter>
  CreateCustomCharacter(sTree,2);
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	ce 01       	movw	r24, r28
 154:	41 96       	adiw	r24, 0x11	; 17
 156:	0e 94 0a 03 	call	0x614	; 0x614 <CreateCustomCharacter>
  #define STREE 2
  
  int i = 0; //for tree varying position
  int j = 0; //for score
  int k = 0; //for collision detection
  int l = 0; //time period in air for Dino
 15a:	c1 2c       	mov	r12, r1
 15c:	d1 2c       	mov	r13, r1
  #define DINO 3
  #define SDINO 1
  #define STREE 2
  
  int i = 0; //for tree varying position
  int j = 0; //for score
 15e:	00 e0       	ldi	r16, 0x00	; 0
 160:	10 e0       	ldi	r17, 0x00	; 0
  
  #define DINO 3
  #define SDINO 1
  #define STREE 2
  
  int i = 0; //for tree varying position
 162:	e1 2c       	mov	r14, r1
 164:	f1 2c       	mov	r15, r1
  while(1)
  { 
  while(1)
  {
    label:
	  i %= 16; //to keep variable i within 16 range which limit of our LCD
 166:	97 01       	movw	r18, r14
 168:	2f 70       	andi	r18, 0x0F	; 15
 16a:	30 78       	andi	r19, 0x80	; 128
 16c:	33 23       	and	r19, r19
 16e:	34 f4       	brge	.+12     	; 0x17c <main+0xa8>
 170:	21 50       	subi	r18, 0x01	; 1
 172:	31 09       	sbc	r19, r1
 174:	20 6f       	ori	r18, 0xF0	; 240
 176:	3f 6f       	ori	r19, 0xFF	; 255
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	79 01       	movw	r14, r18
      lcd_command(LINE2_15BOX - i); //changing position of tree with change in i
 17e:	8f ec       	ldi	r24, 0xCF	; 207
 180:	82 1b       	sub	r24, r18
 182:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
      lcd_data(0x5C); //display tree which actually a Yaun sign stored at 0x5C in CGROM of LCD
 186:	8c e5       	ldi	r24, 0x5C	; 92
 188:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd_data>
      
      //jump
      if(((PINA & (1<<PA3)) == 8) && (l < 3))
 18c:	cb 9b       	sbis	0x19, 3	; 25
 18e:	10 c0       	rjmp	.+32     	; 0x1b0 <main+0xdc>
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	c8 16       	cp	r12, r24
 194:	d1 04       	cpc	r13, r1
 196:	64 f4       	brge	.+24     	; 0x1b0 <main+0xdc>
      {
        lcd_command(LINE1_2BOX);
 198:	82 e8       	ldi	r24, 0x82	; 130
 19a:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
        lcd_data(DINO); //display Dino
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd_data>
        k = 1;
        l++;
 1a4:	9f ef       	ldi	r25, 0xFF	; 255
 1a6:	c9 1a       	sub	r12, r25
 1a8:	d9 0a       	sbc	r13, r25
      //jump
      if(((PINA & (1<<PA3)) == 8) && (l < 3))
      {
        lcd_command(LINE1_2BOX);
        lcd_data(DINO); //display Dino
        k = 1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
        l++;
 1ae:	11 c0       	rjmp	.+34     	; 0x1d2 <main+0xfe>
      }
      else //Default Position of Dino
      {
        lcd_command(LINE2_2BOX);
 1b0:	82 ec       	ldi	r24, 0xC2	; 194
 1b2:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
        lcd_data(DINO);
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd_data>
        k = 0;
        
        if(l == 3)
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	c8 16       	cp	r12, r24
 1c0:	d1 04       	cpc	r13, r1
 1c2:	19 f0       	breq	.+6      	; 0x1ca <main+0xf6>
      }
      else //Default Position of Dino
      {
        lcd_command(LINE2_2BOX);
        lcd_data(DINO);
        k = 0;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <main+0xfe>
        
        if(l == 3)
        {
          l = 0;
 1ca:	c1 2c       	mov	r12, r1
 1cc:	d1 2c       	mov	r13, r1
      }
      else //Default Position of Dino
      {
        lcd_command(LINE2_2BOX);
        lcd_data(DINO);
        k = 0;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
          l = 0;
        }
      }
      
	  //Collision detection
      if(k == 0 && i == 13)
 1d2:	89 2b       	or	r24, r25
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <main+0x104>
 1d6:	5b c0       	rjmp	.+182    	; 0x28e <main+0x1ba>
 1d8:	9d e0       	ldi	r25, 0x0D	; 13
 1da:	e9 16       	cp	r14, r25
 1dc:	f1 04       	cpc	r15, r1
 1de:	09 f0       	breq	.+2      	; 0x1e2 <main+0x10e>
 1e0:	56 c0       	rjmp	.+172    	; 0x28e <main+0x1ba>
      i++;
      j++;
    
  }  
  
  lcd_command(LINE2_2BOX); //after collision state of Dino and Tree
 1e2:	82 ec       	ldi	r24, 0xC2	; 194
 1e4:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
  lcd_data(SDINO);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd_data>
  lcd_data(STREE);
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd_data>
 1f4:	8f e1       	ldi	r24, 0x1F	; 31
 1f6:	9e e4       	ldi	r25, 0x4E	; 78
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x124>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x12a>
 1fe:	00 00       	nop
  _delay_ms(5);
  lcd_command(LINE2_2BOX);
 200:	82 ec       	ldi	r24, 0xC2	; 194
 202:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_command>
  lcd_putc('*');
 206:	8a e2       	ldi	r24, 0x2A	; 42
 208:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
  lcd_gotoxy(0,0);
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 c0 03 	call	0x780	; 0x780 <lcd_gotoxy>
  
  lcd_print2("GAMEOVER"); //Game Over text animation
 214:	6b eb       	ldi	r22, 0xBB	; 187
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_print2>
  
  //Display Best score
  Bestscore = max((j - 1),eeprom_read_word(0));
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <eeprom_read_word>
 228:	bc 01       	movw	r22, r24
 22a:	c8 01       	movw	r24, r16
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <max>
 232:	4c 01       	movw	r8, r24
  eeprom_write_word(0,Bestscore);
 234:	bc 01       	movw	r22, r24
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 df 03 	call	0x7be	; 0x7be <eeprom_write_word>
  lcd_gotoxy(13,1);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	8d e0       	ldi	r24, 0x0D	; 13
 242:	0e 94 c0 03 	call	0x780	; 0x780 <lcd_gotoxy>
  lcd_putc('0' + (Bestscore/100));
 246:	c4 01       	movw	r24, r8
 248:	64 e6       	ldi	r22, 0x64	; 100
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 250:	3c 01       	movw	r6, r24
 252:	80 e3       	ldi	r24, 0x30	; 48
 254:	86 0f       	add	r24, r22
 256:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
  lcd_putc('0' + ((Bestscore/10)%10));
 25a:	0f 2e       	mov	r0, r31
 25c:	fa e0       	ldi	r31, 0x0A	; 10
 25e:	af 2e       	mov	r10, r31
 260:	b1 2c       	mov	r11, r1
 262:	f0 2d       	mov	r31, r0
 264:	c4 01       	movw	r24, r8
 266:	b5 01       	movw	r22, r10
 268:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 26c:	cb 01       	movw	r24, r22
 26e:	b5 01       	movw	r22, r10
 270:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 274:	80 5d       	subi	r24, 0xD0	; 208
 276:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
  lcd_putc('0' + ((Bestscore%100)%10));
 27a:	c3 01       	movw	r24, r6
 27c:	b5 01       	movw	r22, r10
 27e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 282:	80 5d       	subi	r24, 0xD0	; 208
 284:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
 
  //Retry Game
  if(((PINA & (1<<PB3))) == 8 && o == 1)  
 288:	cb 99       	sbic	0x19, 3	; 25
 28a:	94 c0       	rjmp	.+296    	; 0x3b4 <main+0x2e0>
 28c:	6c cf       	rjmp	.-296    	; 0x166 <main+0x92>
		o = 1;
        break;
      }
	  
	  //speeding up the game with increasing score
	  if(j > 100)
 28e:	05 36       	cpi	r16, 0x65	; 101
 290:	11 05       	cpc	r17, r1
 292:	3c f0       	brlt	.+14     	; 0x2a2 <main+0x1ce>
 294:	8f e9       	ldi	r24, 0x9F	; 159
 296:	9c e8       	ldi	r25, 0x8C	; 140
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x1c4>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x1ca>
 29e:	00 00       	nop
 2a0:	27 c0       	rjmp	.+78     	; 0x2f0 <main+0x21c>
	  {
		   _delay_ms(9);
	  }
	  else if(j > 300)
 2a2:	0d 32       	cpi	r16, 0x2D	; 45
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	19 07       	cpc	r17, r25
 2a8:	3c f0       	brlt	.+14     	; 0x2b8 <main+0x1e4>
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	9c e7       	ldi	r25, 0x7C	; 124
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x1da>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x1e0>
 2b4:	00 00       	nop
 2b6:	1c c0       	rjmp	.+56     	; 0x2f0 <main+0x21c>
	  {
		   _delay_ms(8);
	  }
	  else if(j > 500)
 2b8:	05 3f       	cpi	r16, 0xF5	; 245
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	19 07       	cpc	r17, r25
 2be:	3c f0       	brlt	.+14     	; 0x2ce <main+0x1fa>
 2c0:	8f e5       	ldi	r24, 0x5F	; 95
 2c2:	9d e6       	ldi	r25, 0x6D	; 109
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0x1f0>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x1f6>
 2ca:	00 00       	nop
 2cc:	11 c0       	rjmp	.+34     	; 0x2f0 <main+0x21c>
	  {
		   _delay_ms(7);
	  }
	  else if(j > 900)
 2ce:	05 38       	cpi	r16, 0x85	; 133
 2d0:	93 e0       	ldi	r25, 0x03	; 3
 2d2:	19 07       	cpc	r17, r25
 2d4:	3c f0       	brlt	.+14     	; 0x2e4 <main+0x210>
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	9e e4       	ldi	r25, 0x4E	; 78
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <main+0x206>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x20c>
 2e0:	00 00       	nop
 2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <main+0x21c>
 2e4:	8f e3       	ldi	r24, 0x3F	; 63
 2e6:	9c e9       	ldi	r25, 0x9C	; 156
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x214>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x21a>
 2ee:	00 00       	nop
	  else
	  {
		 _delay_ms(10);  
	  }
     
      lcd_clrscr(); //clear screen
 2f0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd_clrscr>
      
	  //Score printing
      if(j < 10)
 2f4:	0a 30       	cpi	r16, 0x0A	; 10
 2f6:	11 05       	cpc	r17, r1
 2f8:	74 f4       	brge	.+28     	; 0x316 <main+0x242>
      {
        lcd_gotoxy(10,0);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	8a e0       	ldi	r24, 0x0A	; 10
 2fe:	0e 94 c0 03 	call	0x780	; 0x780 <lcd_gotoxy>
        lcd_print("Hi 00");
 302:	64 ec       	ldi	r22, 0xC4	; 196
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 29 03 	call	0x652	; 0x652 <lcd_print>
        lcd_putc('0' + j);
 30c:	80 e3       	ldi	r24, 0x30	; 48
 30e:	80 0f       	add	r24, r16
 310:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
 314:	49 c0       	rjmp	.+146    	; 0x3a8 <main+0x2d4>
      }
      else if( j < 100)
 316:	04 36       	cpi	r16, 0x64	; 100
 318:	11 05       	cpc	r17, r1
 31a:	c4 f4       	brge	.+48     	; 0x34c <main+0x278>
      {
        lcd_gotoxy(10,0);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8a e0       	ldi	r24, 0x0A	; 10
 320:	0e 94 c0 03 	call	0x780	; 0x780 <lcd_gotoxy>
        lcd_print("Hi 0");
 324:	6a ec       	ldi	r22, 0xCA	; 202
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 29 03 	call	0x652	; 0x652 <lcd_print>
        lcd_putc('0' + (j/10));
 32e:	c8 01       	movw	r24, r16
 330:	6a e0       	ldi	r22, 0x0A	; 10
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 338:	b8 2e       	mov	r11, r24
 33a:	80 e3       	ldi	r24, 0x30	; 48
 33c:	86 0f       	add	r24, r22
 33e:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
        lcd_putc('0' + (j%10));
 342:	80 e3       	ldi	r24, 0x30	; 48
 344:	8b 0d       	add	r24, r11
 346:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
 34a:	2e c0       	rjmp	.+92     	; 0x3a8 <main+0x2d4>
      }
      else if( j < 1000)
 34c:	08 3e       	cpi	r16, 0xE8	; 232
 34e:	93 e0       	ldi	r25, 0x03	; 3
 350:	19 07       	cpc	r17, r25
 352:	54 f5       	brge	.+84     	; 0x3a8 <main+0x2d4>
      {
        lcd_gotoxy(10,0);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	8a e0       	ldi	r24, 0x0A	; 10
 358:	0e 94 c0 03 	call	0x780	; 0x780 <lcd_gotoxy>
        lcd_print("Hi ");
 35c:	6f ec       	ldi	r22, 0xCF	; 207
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 29 03 	call	0x652	; 0x652 <lcd_print>
        lcd_putc('0' + (j/100));
 366:	c8 01       	movw	r24, r16
 368:	64 e6       	ldi	r22, 0x64	; 100
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 370:	4c 01       	movw	r8, r24
 372:	80 e3       	ldi	r24, 0x30	; 48
 374:	86 0f       	add	r24, r22
 376:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
        lcd_putc('0' + ((j/10)%10));
 37a:	0f 2e       	mov	r0, r31
 37c:	fa e0       	ldi	r31, 0x0A	; 10
 37e:	af 2e       	mov	r10, r31
 380:	b1 2c       	mov	r11, r1
 382:	f0 2d       	mov	r31, r0
 384:	c8 01       	movw	r24, r16
 386:	b5 01       	movw	r22, r10
 388:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 38c:	cb 01       	movw	r24, r22
 38e:	b5 01       	movw	r22, r10
 390:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 394:	80 5d       	subi	r24, 0xD0	; 208
 396:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
        lcd_putc('0' + ((j%100)%10));
 39a:	c4 01       	movw	r24, r8
 39c:	b5 01       	movw	r22, r10
 39e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 3a2:	80 5d       	subi	r24, 0xD0	; 208
 3a4:	0e 94 43 03 	call	0x686	; 0x686 <lcd_putc>
      }
      i++;
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	e8 1a       	sub	r14, r24
 3ac:	f8 0a       	sbc	r15, r24
      j++;
 3ae:	0f 5f       	subi	r16, 0xFF	; 255
 3b0:	1f 4f       	sbci	r17, 0xFF	; 255
    
  }  
 3b2:	d9 ce       	rjmp	.-590    	; 0x166 <main+0x92>
    i = 0;
    j = 0;
    k = 0;
    l = 0;
	o = 0;
    lcd_clrscr();
 3b4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd_clrscr>
    lcd_gotoxy(3,0);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	0e 94 c0 03 	call	0x780	; 0x780 <lcd_gotoxy>
    lcd_print2("DinoGame!!");
 3c0:	60 eb       	ldi	r22, 0xB0	; 176
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_print2>
  if(((PINA & (1<<PB3))) == 8 && o == 1)  
  {
    i = 0;
    j = 0;
    k = 0;
    l = 0;
 3ca:	c1 2c       	mov	r12, r1
 3cc:	d1 2c       	mov	r13, r1
 
  //Retry Game
  if(((PINA & (1<<PB3))) == 8 && o == 1)  
  {
    i = 0;
    j = 0;
 3ce:	00 e0       	ldi	r16, 0x00	; 0
 3d0:	10 e0       	ldi	r17, 0x00	; 0
  lcd_putc('0' + ((Bestscore%100)%10));
 
  //Retry Game
  if(((PINA & (1<<PB3))) == 8 && o == 1)  
  {
    i = 0;
 3d2:	e1 2c       	mov	r14, r1
 3d4:	f1 2c       	mov	r15, r1
    l = 0;
	o = 0;
    lcd_clrscr();
    lcd_gotoxy(3,0);
    lcd_print2("DinoGame!!");
    goto label; //go to label for game restart
 3d6:	c7 ce       	rjmp	.-626    	; 0x166 <main+0x92>

Disassembly of section .text.libgcc.div:

000006b0 <__divmodhi4>:
 6b0:	97 fb       	bst	r25, 7
 6b2:	07 2e       	mov	r0, r23
 6b4:	16 f4       	brtc	.+4      	; 0x6ba <__divmodhi4+0xa>
 6b6:	00 94       	com	r0
 6b8:	07 d0       	rcall	.+14     	; 0x6c8 <__divmodhi4_neg1>
 6ba:	77 fd       	sbrc	r23, 7
 6bc:	09 d0       	rcall	.+18     	; 0x6d0 <__divmodhi4_neg2>
 6be:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__udivmodhi4>
 6c2:	07 fc       	sbrc	r0, 7
 6c4:	05 d0       	rcall	.+10     	; 0x6d0 <__divmodhi4_neg2>
 6c6:	3e f4       	brtc	.+14     	; 0x6d6 <__divmodhi4_exit>

000006c8 <__divmodhi4_neg1>:
 6c8:	90 95       	com	r25
 6ca:	81 95       	neg	r24
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	08 95       	ret

000006d0 <__divmodhi4_neg2>:
 6d0:	70 95       	com	r23
 6d2:	61 95       	neg	r22
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255

000006d6 <__divmodhi4_exit>:
 6d6:	08 95       	ret

Disassembly of section .text.libgcc.div:

000006d8 <__udivmodhi4>:
 6d8:	aa 1b       	sub	r26, r26
 6da:	bb 1b       	sub	r27, r27
 6dc:	51 e1       	ldi	r21, 0x11	; 17
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <__udivmodhi4_ep>

000006e0 <__udivmodhi4_loop>:
 6e0:	aa 1f       	adc	r26, r26
 6e2:	bb 1f       	adc	r27, r27
 6e4:	a6 17       	cp	r26, r22
 6e6:	b7 07       	cpc	r27, r23
 6e8:	10 f0       	brcs	.+4      	; 0x6ee <__udivmodhi4_ep>
 6ea:	a6 1b       	sub	r26, r22
 6ec:	b7 0b       	sbc	r27, r23

000006ee <__udivmodhi4_ep>:
 6ee:	88 1f       	adc	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	5a 95       	dec	r21
 6f4:	a9 f7       	brne	.-22     	; 0x6e0 <__udivmodhi4_loop>
 6f6:	80 95       	com	r24
 6f8:	90 95       	com	r25
 6fa:	bc 01       	movw	r22, r24
 6fc:	cd 01       	movw	r24, r26
 6fe:	08 95       	ret

Disassembly of section .text.avrlibc:

000007a4 <eeprom_read_word>:
 7a4:	cb 01       	movw	r24, r22
 7a6:	a8 e1       	ldi	r26, 0x18	; 24
 7a8:	b0 e0       	ldi	r27, 0x00	; 0
 7aa:	42 e0       	ldi	r20, 0x02	; 2
 7ac:	50 e0       	ldi	r21, 0x00	; 0
 7ae:	0c 94 84 03 	jmp	0x708	; 0x708 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000007be <eeprom_write_word>:
 7be:	0e 94 9f 03 	call	0x73e	; 0x73e <eeprom_write_byte>
 7c2:	27 2f       	mov	r18, r23
 7c4:	0c 94 a0 03 	jmp	0x740	; 0x740 <eeprom_write_r18>

Disassembly of section .text.avrlibc:

00000700 <eeprom_read_block>:
 700:	ba 01       	movw	r22, r20
 702:	a9 01       	movw	r20, r18
 704:	dc 01       	movw	r26, r24
 706:	cb 01       	movw	r24, r22

00000708 <eeprom_read_blraw>:
 708:	fc 01       	movw	r30, r24
 70a:	e1 99       	sbic	0x1c, 1	; 28
 70c:	fe cf       	rjmp	.-4      	; 0x70a <eeprom_read_blraw+0x2>
 70e:	06 c0       	rjmp	.+12     	; 0x71c <eeprom_read_blraw+0x14>
 710:	ff bb       	out	0x1f, r31	; 31
 712:	ee bb       	out	0x1e, r30	; 30
 714:	e0 9a       	sbi	0x1c, 0	; 28
 716:	31 96       	adiw	r30, 0x01	; 1
 718:	0d b2       	in	r0, 0x1d	; 29
 71a:	0d 92       	st	X+, r0
 71c:	41 50       	subi	r20, 0x01	; 1
 71e:	50 40       	sbci	r21, 0x00	; 0
 720:	b8 f7       	brcc	.-18     	; 0x710 <eeprom_read_blraw+0x8>
 722:	08 95       	ret

Disassembly of section .text.avrlibc:

0000073e <eeprom_write_byte>:
 73e:	26 2f       	mov	r18, r22

00000740 <eeprom_write_r18>:
 740:	e1 99       	sbic	0x1c, 1	; 28
 742:	fe cf       	rjmp	.-4      	; 0x740 <eeprom_write_r18>
 744:	9f bb       	out	0x1f, r25	; 31
 746:	8e bb       	out	0x1e, r24	; 30
 748:	2d bb       	out	0x1d, r18	; 29
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	e2 9a       	sbi	0x1c, 2	; 28
 750:	e1 9a       	sbi	0x1c, 1	; 28
 752:	0f be       	out	0x3f, r0	; 63
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	08 95       	ret
